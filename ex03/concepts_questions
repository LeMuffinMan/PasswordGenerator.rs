1. Que signifie « prendre la propriété » d’une valeur en Rust ?

La variable dont la propriete est prise ne peut etre utilisee par d'autres variables.
Une fonction peut prendre la propriete de la variable si le parametre n'est pas une reference
apres un println! la propriete de la variable est consommee par la macro (?) println!

2. Quelle différence entre un emprunt mutable et un emprunt immuable ?

?

3. Pourquoi Rust interdit-il d’avoir plusieurs emprunts mutables en même temps ?

?

Questions de comparaison avec C :

1. En C, passer un pointeur à une fonction ne transfère pas la propriété. Pourquoi Rust change-t-il cette logique ?

Par securite ?
passer le pointeur transfere la propriete de la valeur pointee ?

2. Quels problèmes classiques en C sont évités grâce à l’ownership de Rust ?

utilier des pointeurs dereferences, use after free ?

3. Quels sont les inconvénients potentiels de ce modèle par rapport à C ?

plus contraignant ?
