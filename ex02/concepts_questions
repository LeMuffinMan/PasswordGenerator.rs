
1. Pourquoi les variables sont-elles immuables par défaut en Rust ?

"Security by design" : rendre les variables immuables par defaut rend plus improbable qu'elles soient modifiees alors qu'elle ne sont pas supposes l'etre dans la logique du code ?

2. Quelle est la différence entre &str et String ?

&str est une reference a String, String est la chaine de characteres elle meme ?
ownership & borrowing ?

let name: str = Leo
&str : une reference vers la string leo
String : la chaine de characteres Leo elle meme (ayant un proprietaire unique)

3. Que se passe-t-il si on essaie de modifier une variable non mutable ?

Le compilateur refuse de compiler et nous indique clairement quelle variable doit etre passee en mut pour pouvoir compiler


Questions de comparaison avec C :

1. Quelle est la différence de comportement entre une variable const en C et une variable immuable en Rust ?

En rust toute variable est par defaut "const" (immuable), en C, toute valeur est par defaut modifiable, mais on peut preciser "const" dans son type pour la rendre immuable (au moins pour les strings)
différence par rapport au compilateur ?

2. En C, les chaînes sont des tableaux de char. En quoi la gestion des chaînes en Rust diffère-t-elle ?

On passe par des methodes pour les manipuler ?

3. Pourquoi Rust choisit-il de typer explicitement certaines valeurs alors que C peut inférer via promotion de types ?

inferer via promotion de types ???
