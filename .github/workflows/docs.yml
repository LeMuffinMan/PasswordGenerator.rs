
name: Deploy Rust Docs

# Will trigger for each push on main
on:
  push:
    branches:
      - main

# allow to read the repo content
# allow to edit on Github Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Prevent concurrent deployments from conflicting
concurrency:
  group: deploy
  cancel-in-progress: false

jobs: 
  build:
    runs-on: ubuntu-latest
    steps: 
    # This clones the repo in the remote VM for next steps
    - name: Checkout code 
      uses: actions/checkout@v4

    # Installs rust on the remote VM 
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    # Configure caching for Rust builds to speed up workflow
    - name: Configure cache
      uses: Swatinem/rust-cache@v2

    # Prepare GitHub Pages deployment
    - name: Setup pages
      id: pages
      uses: actions/configure-pages@v5

    # Clean docs folder to avoid stale files
    - name: Clean docs folder
      run: cargo clean --doc

    # Run the command cargo doc: no deps for lightweight site
    - name: Build docs
      run: cargo doc --no-deps

    # Add redirect so root of GitHub Pages points to crate doc
    - name: Add redirect
      run: echo '<meta http-equiv="refresh" content="0;url=PasswordGenerator/index.html">' > target/doc/index.html

    # Remove lock file that the new Pages deployment method doesn't like
    - name: Remove lock file
      run: rm target/doc/.lock

    # Upload generated docs as artifact for deployment
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: target/doc

  deploy:
    # indicate that the last job "build" must be done to start
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # allow to have the link for the GitHub Pages at the end of the deployment
    steps:
      # Deploy the artifact to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

